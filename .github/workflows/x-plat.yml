name: FFI - Cross

on:
  # push:
  release:
    types: [published]

jobs:

  build_headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: rustc --version || true
        shell: bash
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly
      - name: Build headers with cargo pact_ffi
        run: ./build-headers.sh
        working-directory: rust/pact_ffi
        shell: bash
      - name: Upload the artifacts
        uses: actions/upload-artifact@v3.1.2
        with:
          name: release-artifacts
          path: rust/target/artifacts
      - name: Upload Release Assets
        if: startsWith(github.ref, 'refs/tags/libpact_ffi')
        uses: svenstaro/upload-release-action@2.5.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: rust/target/artifacts/*
          file_glob: true
          tag: ${{ github.ref }}
  

  build_cross:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest]
        rust: [stable]
        target: # https://github.com/cross-rs/cross/blob/main/targets.toml
        - x86_64-unknown-linux-gnu
        - x86_64-unknown-linux-musl
        - aarch64-unknown-linux-gnu
        - aarch64-unknown-linux-musl
        - arm-unknown-linux-gnueabi
        - arm-unknown-linux-gnueabihf
        - arm-unknown-linux-musleabi
        - arm-unknown-linux-musleabihf
        - armv7-unknown-linux-gnueabi
        - armv7-unknown-linux-gnueabihf
        - armv7-unknown-linux-musleabi
        - armv7-unknown-linux-musleabihf
        - i586-unknown-linux-gnu
        - i686-unknown-linux-gnu
        - i586-unknown-linux-musl
        - i686-unknown-linux-musl
        - x86_64-unknown-netbsd
        - x86_64-unknown-freebsd
        - i686-unknown-freebsd
        - aarch64-unknown-freebsd
        - armv6-unknown-freebsd
        - armv7-unknown-freebsd
        - armv5te-unknown-linux-gnueabi
        - armv5te-unknown-linux-musleabi
        - arm-linux-androideabi
        - armv7-linux-androideabi
        - asmjs-unknown-emscripten
        - mips-unknown-linux-gnu
        - mips-unknown-linux-musl
        - mipsel-unknown-linux-gnu
        - mipsel-unknown-linux-musl
        - mips64-unknown-linux-gnuabi64
        - mips64el-unknown-linux-gnuabi64
        - mips64-unknown-linux-muslabi64
        - mips64el-unknown-linux-muslabi64
        - powerpc-unknown-linux-gnu
        - powerpc64-unknown-linux-gnu
        - powerpc64le-unknown-linux-gnu
        - riscv64gc-unknown-linux-gnu
        - s390x-unknown-linux-gnu
        - s390x-unknown-linux-musl
        - sparc64-unknown-linux-gnu
        - aarch64-linux-android
        - i686-linux-android
        - x86_64-linux-android
        - wasm32-unknown-emscripten
        - i686-unknown-freebsd
        - sparcv9-sun-solaris
        - x86_64-sun-solaris
        - x86_64-unknown-illumos
        - x86_64-unknown-dragonfly
        - thumbv6m-none-eabi
        - thumbv7em-none-eabi
        - thumbv7em-none-eabihf
        - thumbv7m-none-eabi
        - thumbv7neon-linux-androideabi
        - thumbv7neon-unknown-linux-gnueabihf
        - thumbv8m.base-none-eabi
        - thumbv8m.main-none-eabi
        - x86_64-pc-windows-msvc
        - x86_64-pc-windows-gnu
        - aarch64-pc-windows-msvc
        - aarch64-pc-windows-gnullvm
        - aarch64-uwp-windows-msvc
        - i586-pc-windows-msvc
        - i686-pc-windows-gnu
        - i686-pc-windows-msvc
        - i686-uwp-windows-gnu
        - i686-uwp-windows-msvc
        - thumbv7a-pc-windows-msvc
        - thumbv7a-uwp-windows-msvc
        - x86_64-pc-windows-gnullvm
        - x86_64-uwp-windows-gnu
        - x86_64-uwp-windows-msvc
        crate: [pact_ffi]
    steps:
      - uses: actions/checkout@v3
      - run: rustc --version || true
        shell: bash
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
      # - name: install cross for ${{ matrix.target }}
      #   run: cargo install cross --git https://github.com/cross-rs/cross
      #   working-directory: rust/${{ matrix.crate }}
        # shell: bash
      - name: Build ${{ matrix.crate }} with cross for ${{ matrix.target }}
        run: ./build-cross.sh
        working-directory: rust/${{ matrix.crate }}
        shell: bash
        env:
          target: ${{ matrix.target }}
      - name: Show ${{ matrix.crate }} release
        run: ls && mkdir -p ../../artifacts/
        working-directory: rust/target/${{ matrix.target }}/release
        shell: bash
      - name: Upload the artifacts
        uses: actions/upload-artifact@v3.1.2
        with:
          name: release-artifacts
          path: rust/target/artifacts
      - name: Upload Release Assets
        if: (startsWith(github.ref, 'refs/tags/libpact_ffi')  || startsWith(github.ref, 'refs/tags/pact_verifier_cli') || startsWith(github.ref, 'refs/tags/pact_mock_server_cli')) 
        uses: svenstaro/upload-release-action@2.5.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: rust/target/artifacts/*
          file_glob: true
          tag: ${{ github.ref }}
  

    runs-on: ${{ matrix.operating-system }}
    needs: setup_matrix
    strategy:
      fail-fast: false
      matrix:
        operating-system: [windows-latest]
        rust: [stable]
        target:
          - x86_64-pc-windows-msvc # ✅
          - aarch64-pc-windows-msvc # ✅
          - i686-pc-windows-msvc # ✅
          # - i686-pc-windows-gnu # ✅ with cross, native with cargo error: linker `i686-w64-mingw32-gcc` not found
          - x86_64-pc-windows-gnu # ✅
        #   - i586-pc-windows-msvc
        #   - aarch64-pc-windows-gnullvm
        #   - aarch64-uwp-windows-msvc
        #   - i686-uwp-windows-gnu
        #   - i686-uwp-windows-msvc
        #   - thumbv7a-pc-windows-msvc
        #   - thumbv7a-uwp-windows-msvc
        #   - x86_64-pc-windows-gnullvm
        #   - x86_64-uwp-windows-gnu
        #   - x86_64-uwp-windows-msvc
        crate: ${{ fromJson(needs.setup_matrix.outputs.crate) }}
    steps:
      - uses: actions/checkout@v3
      - run: rustc --version || true
        shell: bash
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
      - name: Ring 0.16.20 patch for ARM64
        if: matrix.target == 'aarch64-pc-windows-msvc' || matrix.target == 'aarch64-pc-windows-gnullvm' || matrix.target == 'aarch64-uwp-windows-msvc'
        run: |
          echo ring = { git = \"https://github.com/awakecoding/ring\", branch = \"0.16.20_alpha\" } >> cargo.toml
          cargo update
        working-directory: rust
        shell: bash
      - name: Build ${{ matrix.crate }}
        run: cargo build --target ${{ matrix.target }} --release
        working-directory: rust/${{ matrix.crate }}
        shell: bash
      - name: Show ${{ matrix.crate }} release
        run: ls && mkdir -p ../../artifacts/
        working-directory: rust/target/${{ matrix.target }}/release
        shell: bash
      - name: Process the artifacts
        if: matrix.crate == 'pact_ffi' && matrix.target != 'x86_64-pc-windows-gnu'
        run: |
          gzip -c target/${{ matrix.target }}/release/pact_ffi.dll > target/artifacts/pact_ffi-${{ matrix.target }}.dll.gz
          openssl dgst -sha256 -r target/artifacts/pact_ffi-${{ matrix.target }}.dll.gz > target/artifacts/pact_ffi-${{ matrix.target }}.dll.gz.sha256
          gzip -c target/${{ matrix.target }}/release/pact_ffi.dll.lib > target/artifacts/pact_ffi-${{ matrix.target }}.dll.lib.gz
          openssl dgst -sha256 -r target/artifacts/pact_ffi-${{ matrix.target }}.dll.lib.gz > target/artifacts/pact_ffi-${{ matrix.target }}.dll.lib.gz.sha256
          gzip -c target/${{ matrix.target }}/release/pact_ffi.lib > target/artifacts/pact_ffi-${{ matrix.target }}.lib.gz
          openssl dgst -sha256 -r target/artifacts/pact_ffi-${{ matrix.target }}.lib.gz > target/artifacts/pact_ffi-${{ matrix.target }}.lib.gz.sha256
        working-directory: rust
      - name: Process the artifacts
        if: matrix.crate == 'pact_ffi' && matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          gzip -c target/${{ matrix.target }}/release/pact_ffi.dll > target/artifacts/pact_ffi-${{ matrix.target }}.dll.gz
          openssl dgst -sha256 -r target/artifacts/pact_ffi-${{ matrix.target }}.dll.gz > target/artifacts/pact_ffi-${{ matrix.target }}.dll.gz.sha256
        working-directory: rust
      - name: Process the ${{ matrix.crate }} on ${{ matrix.operating-system }} for ${{ matrix.target }}
        if: matrix.crate != 'pact_ffi'
        run: |
          if [[ ${{ matrix.target }} == *"windows"* ]]; then
            ext=.exe
          fi
          gzip -c target/${{ matrix.target }}/release/${{ matrix.crate }}$ext > target/artifacts/${{ matrix.crate }}-${{ matrix.target }}$ext.gz
          openssl dgst -sha256 -r target/artifacts/${{ matrix.crate }}-${{ matrix.target }}.exe.gz > target/artifacts/${{ matrix.crate }}-${{ matrix.target }}$ext.gz.sha256
      - name: Upload the artifacts
        if: startsWith(github.ref, 'refs/tags/libpact_ffi')  || startsWith(github.ref, 'refs/tags/pact_verifier_cli') || startsWith(github.ref, 'refs/tags/pact_mock_server_cli')
        uses: actions/upload-artifact@v3.1.2
        with:
          name: release-artifacts
          path: rust/target/artifacts
      - name: Upload Release Assets
        if: startsWith(github.ref, 'refs/tags/libpact_ffi')  || startsWith(github.ref, 'refs/tags/pact_verifier_cli') || startsWith(github.ref, 'refs/tags/pact_mock_server_cli')
        uses: svenstaro/upload-release-action@2.5.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: rust/target/artifacts/*
          file_glob: true
          tag: ${{ github.ref }}