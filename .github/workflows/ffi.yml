name: Pact-Rust FFI Build

on:
  push:
  release:
    types: [published]

jobs:

  setup_matrix:
    runs-on: ubuntu-latest
    outputs:
      crate: ${{ steps.generate_matrix.outputs.crate }}
    steps:
      - name: Generate Matrix for testing
        id: generate_matrix
        run: |
          if [[ ${{ github.ref }} == *"libpact_ffi"* ]]; then
            crate_to_test=[\"pact_ffi\"]
          elif [[ ${{ github.ref }} == *"pact_verifier_cli"* ]]; then
            crate_to_test=[\"pact_verifier_cli\"]
          elif [[ ${{ github.ref }} == *"pact_mock_server_cli"* ]]; then
            crate_to_test=[\"pact_mock_server_cli\"]
          else
            crate_to_test=[\"pact_verifier_cli\",\"pact_mock_server_cli\",\"pact_ffi\"]
          fi
          CRATE=$crate_to_test
          echo "crate=${CRATE}" >> "$GITHUB_OUTPUT"
      - run: echo "${{ toJson(steps.generate_matrix.outputs.crate) }}"
        name: Testing ${{ toJson(steps.generate_matrix.outputs.crate) }}
  
  build_cross:
    runs-on: ${{ matrix.operating-system }}
    needs: setup_matrix
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest]
        target: # https://github.com/cross-rs/cross/blob/main/targets.toml
          - x86_64-unknown-freebsd # âœ… (fails on verifier and mock_server_cli - error: linking with `x86_64-unknown-freebsd12-gcc - libelf.so.2 not found)
          - aarch64-linux-android
          - i686-linux-android
          - x86_64-linux-android
        crate: ${{ fromJson(needs.setup_matrix.outputs.crate) }}
    steps:
      - uses: actions/checkout@v3
      - run: rustc --version || true
        shell: bash
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
      # - run: docker run --privileged --rm tonistiigi/binfmt --install all
      - name: install cross for ${{ matrix.target }}
        run: cargo install cross --git https://github.com/cross-rs/cross
        working-directory: rust/${{ matrix.crate }}
        shell: bash
      - name: Build ${{ matrix.crate }} with cross for ${{ matrix.target }}
        run: cross build --target ${{ matrix.target }} --release
        working-directory: rust/${{ matrix.crate }}
        shell: bash
      - name: Show ${{ matrix.crate }} release
        run: ls && mkdir -p ../../artifacts/
        working-directory: rust/target/${{ matrix.target }}/release
        shell: bash
      - name: Process the so file
        if: matrix.crate == 'pact_ffi' && ( matrix.target == 'x86_64-unknown-linux-gnu'  ||  matrix.target == 'aarch64-unknown-linux-gnu' ||  matrix.target == 'arm-unknown-linux-gnueabi' || matrix.target == 'arm-unknown-linux-gnueabihf' ||  matrix.target == 'thumbv7neon-unknown-linux-gnueabihf' ||  matrix.target == 'i586-unknown-linux-gnu' || matrix.target == 'i686-unknown-linux-gnu' || matrix.target == 'armv5te-unknown-linux-gnueabi' || matrix.target == 'arm-linux-androideabi' || matrix.target == 'thumbv7neon-linux-androideabi' || matrix.target == 'x86_64-unknown-freebsd' || matrix.target == 'x86_64-unknown-netbsd')
        run: |
          gzip -c target/${{ matrix.target }}/release/libpact_ffi.so > target/artifacts/libpact_ffi-${{ matrix.target }}.so.gz
          openssl dgst -sha256 -r target/artifacts/libpact_ffi-${{ matrix.target }}.so.gz > target/artifacts/libpact_ffi-${{ matrix.target }}.so.gz.sha256
        working-directory: rust
      - name: Process the dll file
        if: matrix.crate == 'pact_ffi' && ( matrix.target == 'i686-pc-windows-gnu' || matrix.target == 'x86_64-pc-windows-gnu')
        run: |
          gzip -c target/${{ matrix.target }}/release/pact_ffi.dll > target/artifacts/pact_ffi-${{ matrix.target }}.dll.gz
          openssl dgst -sha256 -r target/artifacts/pact_ffi-${{ matrix.target }}.dll.gz > target/artifacts/pact_ffi-${{ matrix.target }}.dll.gz.sha256
        working-directory: rust
      - name: Process the a file
        if: matrix.crate == 'pact_ffi' && ( matrix.target != 'i686-pc-windows-gnu' || matrix.target != 'x86_64-pc-windows-gnu')
        run: |
          gzip -c target/${{ matrix.target }}/release/libpact_ffi.a > target/artifacts/libpact_ffi-${{ matrix.target }}.a.gz
          openssl dgst -sha256 -r target/artifacts/libpact_ffi-${{ matrix.target }}.a.gz > target/artifacts/libpact_ffi-${{ matrix.target }}.a.gz.sha256
        working-directory: rust
      - name: Process the artifacts
        if: (matrix.crate == 'pact_verifier_cli' && ( matrix.target != 'i686-pc-windows-gnu' && matrix.target != 'x86_64-pc-windows-gnu')) 
        run: |
          gzip -c target/${{ matrix.target }}/release/pact_verifier_cli > target/artifacts/pact_verifier_cli-${{ matrix.target }}.gz
          openssl dgst -sha256 -r target/artifacts/pact_verifier_cli-${{ matrix.target }}.gz > target/artifacts/pact_verifier_cli-${{ matrix.target }}.gz.sha256
        working-directory: rust
      - name: Process the artifacts
        if: (matrix.crate == 'pact_mock_server_cli' && ( matrix.target != 'i686-pc-windows-gnu' && matrix.target != 'x86_64-pc-windows-gnu'))
        run: |
          gzip -c target/${{ matrix.target }}/release/pact_mock_server_cli > target/artifacts/pact_mock_server_cli-${{ matrix.target }}.gz
          openssl dgst -sha256 -r target/artifacts/pact_mock_server_cli-${{ matrix.target }}.gz > target/artifacts/pact_mock_server_cli-${{ matrix.target }}.gz.sha256
        working-directory: rust
      - name: Process the artifacts
        if: matrix.crate == 'pact_verifier_cli'  && ( matrix.target == 'i686-pc-windows-gnu' || matrix.target == 'x86_64-pc-windows-gnu')
        run: |
          gzip -c target/${{ matrix.target }}/release/pact_verifier_cli.exe > target/artifacts/pact_verifier_cli-${{ matrix.target }}.exe.gz
          openssl dgst -sha256 -r target/artifacts/pact_verifier_cli-${{ matrix.target }}.exe.gz > target/artifacts/pact_verifier_cli-${{ matrix.target }}.exe.gz.sha256
        working-directory: rust
      - name: Process the artifacts
        if: matrix.crate == 'pact_mock_server_cli'  && ( matrix.target == 'i686-pc-windows-gnu' || matrix.target == 'x86_64-pc-windows-gnu')
        run: |
          gzip -c target/${{ matrix.target }}/release/pact_mock_server_cli.exe > target/artifacts/pact_mock_server_cli-${{ matrix.target }}.exe.gz
          openssl dgst -sha256 -r target/artifacts/pact_mock_server_cli-${{ matrix.target }}.exe.gz > target/artifacts/pact_mock_server_cli-${{ matrix.target }}.exe.gz.sha256
        working-directory: rust
      - name: Upload the artifacts
        if: (startsWith(github.ref, 'refs/tags/libpact_ffi')  || startsWith(github.ref, 'refs/tags/pact_verifier_cli') || startsWith(github.ref, 'refs/tags/pact_mock_server_cli')) 
        uses: actions/upload-artifact@v3.1.2
        with:
          name: release-artifacts
          path: rust/target/artifacts
      - name: Upload Release Assets
        if: (startsWith(github.ref, 'refs/tags/libpact_ffi')  || startsWith(github.ref, 'refs/tags/pact_verifier_cli') || startsWith(github.ref, 'refs/tags/pact_mock_server_cli'))
        uses: svenstaro/upload-release-action@2.5.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: rust/target/artifacts/*
          file_glob: true
          tag: ${{ github.ref }}